This extracts terms and entities from a JSON. It currently supports extracting set lists of terms and words in ALLCAPS. In the future it will support extracting names, locations, and dates/times. To use, download the gem 'entityextractor'.

Set Terms Extraction:
To extract a list of set terms, you need the following-
   1. JSON with data
   2. The fieldname(s) you want to extract from
   3. List of terms to extract in one of the following forms
      a. An array
      b. A hash with a string key and value (both will be extracted unless otherwise specified)
      c. A hash with a string key and a hash value (the overall key and values of value hash will be extracted)
   4. (optional) An array of extraction terms to ignore, with the following options-
      hashkey: In type b or c, ignore hashkeys
      hashval: In type b, ignore string hashvals
      field names: In type c, ignore the field specified
   5. Know which fields you want to be case sensitive. By type, the input options are-
      a. "casesensitive" or "noncasesensitive"
      b. [], ["hashkey"] (to make hashkey non-case sensitive), ["hashval"] (to make non-cs), ["hashkey", "hashval"]
      c. [] or an array of fields you want to make non-case sensitiive
   6. Inputting hashes for extracted terms lets you map them to the key or other values. Know if you want to do this.
   7. Know what you want to name the field showing the extracted terms

How to do set term extraction-
e = EntityExtractor.new(JSON, "extracted field name", "field name to extract from", "second field name", ...)
e.extract("set", nil, nil, ["terms", "to", "extract"], ["ignore", "these", "fields"], case info as explained in 5, "field to map to", nil)


Extract ALLCAPS:
e = EntityExtractor.new(JSON, "field name to extract from", "second field name", ...)
e.extract("ALLCAPS", minimum # of all caps characters in a row to look for, [array of terms to ignore], nil, nil)


Extract both ALLCAPS and set list of terms:
e = EntityExtractor.new(JSON, "field name to extract from", "second field name", ...)
e.extract("both", minimum # of all caps characters in a row to look for, [array of terms to ignore], ["set", "list", ...], case info, "field to map to", nil)


Extract dates:
e = EntityExtractor.new(JSON, "extract field name", "field name to extract from", "second field name", ...)
e.extract("date", nil, nil, nil, nil, nil, nil, list, of, fields, to append, to dates)


Get output:
JSON with terms appended to each item: e.genJSON
Hash of all terms extracted: e.getExtract
